// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Account | null {
    return changetype<Account | null>(
      store.get_in_block("Account", id.toHexString()),
    );
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get listingsCancelled(): ListingCancelledLoader {
    return new ListingCancelledLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "listingsCancelled",
    );
  }

  get nftsBought(): NftBoughtLoader {
    return new NftBoughtLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "nftsBought",
    );
  }

  get nftsListed(): NftListedLoader {
    return new NftListedLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "nftsListed",
    );
  }

  get activeItems(): ActiveItemLoader {
    return new ActiveItemLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "activeItems",
    );
  }

  get proceedsWithdraws(): ProceedsWithdrawLoader {
    return new ProceedsWithdrawLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "proceedsWithdraws",
    );
  }
}

export class ListingCancelled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ListingCancelled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ListingCancelled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ListingCancelled", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ListingCancelled | null {
    return changetype<ListingCancelled | null>(
      store.get_in_block("ListingCancelled", id),
    );
  }

  static load(id: string): ListingCancelled | null {
    return changetype<ListingCancelled | null>(
      store.get("ListingCancelled", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _tokenAddress(): Bytes {
    let value = this.get("_tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddress(value: Bytes) {
    this.set("_tokenAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }
}

export class NftBought extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftBought entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftBought must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NftBought", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NftBought | null {
    return changetype<NftBought | null>(store.get_in_block("NftBought", id));
  }

  static load(id: string): NftBought | null {
    return changetype<NftBought | null>(store.get("NftBought", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get _tokenAddress(): Bytes {
    let value = this.get("_tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddress(value: Bytes) {
    this.set("_tokenAddress", Value.fromBytes(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }
}

export class NftListed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftListed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftListed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NftListed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NftListed | null {
    return changetype<NftListed | null>(store.get_in_block("NftListed", id));
  }

  static load(id: string): NftListed | null {
    return changetype<NftListed | null>(store.get("NftListed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _tokenAddress(): Bytes {
    let value = this.get("_tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddress(value: Bytes) {
    this.set("_tokenAddress", Value.fromBytes(value));
  }

  get nftOwner(): Bytes {
    let value = this.get("nftOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftOwner(value: Bytes) {
    this.set("nftOwner", Value.fromBytes(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }
}

export class ActiveItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ActiveItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ActiveItem | null {
    return changetype<ActiveItem | null>(store.get_in_block("ActiveItem", id));
  }

  static load(id: string): ActiveItem | null {
    return changetype<ActiveItem | null>(store.get("ActiveItem", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get _tokenAddress(): Bytes {
    let value = this.get("_tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddress(value: Bytes) {
    this.set("_tokenAddress", Value.fromBytes(value));
  }

  get _tokenId(): BigInt {
    let value = this.get("_tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _tokenId(value: BigInt) {
    this.set("_tokenId", Value.fromBigInt(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }
}

export class ProceedsWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProceedsWithdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProceedsWithdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProceedsWithdraw", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProceedsWithdraw | null {
    return changetype<ProceedsWithdraw | null>(
      store.get_in_block("ProceedsWithdraw", id),
    );
  }

  static load(id: string): ProceedsWithdraw | null {
    return changetype<ProceedsWithdraw | null>(
      store.get("ProceedsWithdraw", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ListingCancelledLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ListingCancelled[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ListingCancelled[]>(value);
  }
}

export class NftBoughtLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NftBought[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NftBought[]>(value);
  }
}

export class NftListedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NftListed[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NftListed[]>(value);
  }
}

export class ActiveItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ActiveItem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ActiveItem[]>(value);
  }
}

export class ProceedsWithdrawLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ProceedsWithdraw[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ProceedsWithdraw[]>(value);
  }
}
